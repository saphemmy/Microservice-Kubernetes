apiVersion: v1
kind: Service
metadata:
  name: fleetman-webapp

spec:
  selector:
  # Loadbalancer traffic across Pods matching
  # this defines which pods are going to be represented by this Service
  # The service becomes a network endpoint for either other services
  # or maybe external users

  # Can be given any name e.g: mylabelname
    app: webapp

  ports:
    - name: http
      # Accept traffic sent to port 80 
      # and Forward traffice to port 8080
      port: 80
  # local dev Implementation Start
      # nodePort: 30080 # targetPort is Only for NodePort minimum 30000(local_dev) to avoid clashes of ports

  # Only supported by a few Cloud providers(NodePort, ClusterIP e.g microservies, LoadBalancer)
  # This will give the service a stable IP address and 
  # Long-live entities as well UNLIKE pods that come and go
  # in prod use LoadBalancer/Ingress
  # type: NodePort

  # local dev Implemetation end

  #Cloud env config
  type: LoadBalancer


---

apiVersion: v1
kind: Service
metadata:
  name: fleetman-queue

spec:
  selector:
  # Loadbalancer traffic across Pods matching
  # this defines which pods are going to be represented by this Service
  # The service becomes a network endpoint for either other services
  # or maybe external users

  # Can be given any name e.g: mylabelname
    app: queue

  ports:
    - name: http
      # Accept traffic sent to port 80 
      # and Forward traffice to port 8080
      port: 8161

      # local dev start
      # nodePort: 30010 # targetPort is Only for NodePort minimum 30000 to avoid clases of ports

    - name: endpoint
      port: 61616

  # Only supported by a few Cloud providers(NodePort, ClusterIP e.g microservies, LoadBalancer)
  # This will give the service a stable IP address and 
  # Long-live entities as well UNLIKE pods that come and go
  # in prod use LoadBalancer/Ingress
  # type: NodePort # local dev(NodePort)
  type: ClusterIP

---

# This allows enable REST_API services
apiVersion: v1
kind: Service
metadata:
  name: fleetman-position-tracker

spec:
  selector:
  # Loadbalancer traffic across Pods matching
  # this defines which pods are going to be represented by this Service
  # The service becomes a network endpoint for either other services
  # or maybe external users

  # Can be given any name e.g: mylabelname
    app: position-tracker

  ports:
    - name: http
      # Accept traffic sent to port 80 
      # and Forward traffice to port 8080
      port: 8080
      # nodePort: 30020 # targetPort is Only for NodePort minimum 30000 to avoid clases of ports

  # Only supported by a few Cloud providers(NodePort, ClusterIP e.g microservies, LoadBalancer)
  # This will give the service a stable IP address and 
  # Long-live entities as well UNLIKE pods that come and go
  # in prod use LoadBalancer/Ingress
  type: ClusterIP # ClusterIP exposes the port to other Cluster and NOT Internet again


---

# This allows enable REST_API services
apiVersion: v1
kind: Service
metadata:
  name: fleetman-api-gateway

spec:
  selector:
  # Loadbalancer traffic across Pods matching
  # this defines which pods are going to be represented by this Service
  # The service becomes a network endpoint for either other services
  # or maybe external users

  # Can be given any name e.g: mylabelname
    app: api-gateway

  ports:
    - name: http
      # Accept traffic sent to port 80 
      # and Forward traffice to port 8080
      port: 8080

      # Note using NodePort is for local dev
      # nodePort: 30020 # targetPort is Only for NodePort minimum 30000 to avoid clases of ports

  # Only supported by a few Cloud providers(NodePort, ClusterIP e.g microservies, LoadBalancer)
  # This will give the service a stable IP address and 
  # Long-live entities as well UNLIKE pods that come and go
  # in prod use LoadBalancer/Ingress
  # type: NodePort # NodePort exposes the port to outside(Browser, Internet)
  type: ClusterIP # This is for production